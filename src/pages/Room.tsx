import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { io, Socket } from 'socket.io-client';
import VideoPlayer from '../components/VideoPlayer';
import Chat from '../components/Chat';
import './Room.css';

interface Message {
  id: string;
  username: string;
  text: string;
  timestamp: Date | string;
}

const Room: React.FC = () => {
  const { roomId } = useParams<{ roomId: string }>();
  const navigate = useNavigate();
  const [username, setUsername] = useState('');
  const [messages, setMessages] = useState<Message[]>([]);
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  const [videoUrl, setVideoUrl] = useState('');
  const [users, setUsers] = useState<Array<{id: string, username: string}>>([]);
  const [socket, setSocket] = useState<Socket | null>(null);
  const [isConnected, setIsConnected] = useState(false);
  const lastSyncRef = useRef<number>(0);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–µ–æ
  const saveVideoState = (newVideoUrl?: string, newIsPlaying?: boolean, newCurrentTime?: number, newDuration?: number) => {
    const state = {
      videoUrl: newVideoUrl !== undefined ? newVideoUrl : videoUrl,
      isPlaying: newIsPlaying !== undefined ? newIsPlaying : isPlaying,
      currentTime: newCurrentTime !== undefined ? newCurrentTime : currentTime,
      duration: newDuration !== undefined ? newDuration : duration
    };
    
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', roomId);
    console.log('üíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', state);
    
    localStorage.setItem(`video-state-${roomId}`, JSON.stringify(state));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
    const saved = localStorage.getItem(`video-state-${roomId}`);
    console.log('üíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', saved ? '‚úÖ –£—Å–ø–µ—à–Ω–æ' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ');
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å debounce
  const sendVideoSync = (updateData: any) => {
    const now = Date.now();
    if (now - lastSyncRef.current < 100) { // –ó–∞–¥–µ—Ä–∂–∫–∞ 100–º—Å –º–µ–∂–¥—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è–º–∏
      return;
    }
    lastSyncRef.current = now;
    
    if (socket) {
      console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', updateData);
      socket.emit('video-update', updateData);
    }
  };

  useEffect(() => {
    const savedUsername = localStorage.getItem('username');
    if (!savedUsername) {
      navigate('/create');
      return;
    }
    setUsername(savedUsername);

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–µ–æ –∏–∑ localStorage
    const savedVideoState = localStorage.getItem(`video-state-${roomId}`);
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', roomId);
    console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ localStorage:', savedVideoState);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∫–ª—é—á–∏ localStorage –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('üîç –í—Å–µ –∫–ª—é—á–∏ localStorage:', Object.keys(localStorage));
    
    if (savedVideoState) {
      try {
        const state = JSON.parse(savedVideoState);
        console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–µ–æ:', state);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–∞–∑—É
        setVideoUrl(state.videoUrl || '');
        setIsPlaying(state.isPlaying || false);
        setCurrentTime(state.currentTime || 0);
        setDuration(state.duration || 0);
        
        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∏–¥–µ–æ:', error);
      }
    } else {
      console.log('üìù –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É
    const socketUrl = process.env.NODE_ENV === 'production' 
      ? `${window.location.origin}/api/socket` 
      : 'http://localhost:3005';
    const newSocket = io(socketUrl, {
      timeout: 10000,
      reconnection: true,
      reconnectionAttempts: 10,
      reconnectionDelay: 1000,
      reconnectionDelayMax: 5000,
      transports: ['websocket', 'polling'],
      forceNew: true
    });
    setSocket(newSocket);

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    newSocket.on('connect', () => {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É WebSocket, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ');
      newSocket.emit('join-room', { roomId, username: savedUsername });
    });

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    newSocket.on('connect', () => {
      setIsConnected(true);
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É WebSocket');
    });

    newSocket.on('disconnect', (reason) => {
      setIsConnected(false);
      console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ WebSocket:', reason);
      
      // –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –ø–æ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      if (reason === 'io server disconnect') {
        console.log('üîÑ –°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–∏–ª –Ω–∞—Å, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è...');
        newSocket.connect();
      }
    });

    newSocket.on('connect_error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', error);
      setIsConnected(false);
    });

    newSocket.on('reconnect', (attemptNumber) => {
      console.log('üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, –ø–æ–ø—ã—Ç–∫–∞:', attemptNumber);
      setIsConnected(true);
      // –ü–µ—Ä–µ–ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      newSocket.emit('join-room', { roomId, username: savedUsername });
    });

    newSocket.on('reconnect_error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error);
    });

    newSocket.on('reconnect_failed', () => {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
    });

    newSocket.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ WebSocket:', error);
      setIsConnected(false);
    });

    newSocket.on('room-data', (data) => {
      console.log('üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:', data);
      console.log('üé¨ –¢–µ–∫—É—â–∏–π URL –≤–∏–¥–µ–æ –≤ –∫–æ–º–Ω–∞—Ç–µ:', data.videoUrl);
      console.log('‚èØÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', data.isPlaying);
      setUsers(data.users);
      setVideoUrl(data.videoUrl);
      setIsPlaying(data.isPlaying);
      setCurrentTime(data.currentTime);
      setDuration(data.duration);
      setMessages(data.messages);
    });

    newSocket.on('user-joined', (user) => {
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:', user);
      // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é, –∂–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    });

    newSocket.on('user-left', (user) => {
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–Ω—É–ª:', user);
      // –ù–µ —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é, –∂–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    });

    newSocket.on('users-updated', (updatedUsers) => {
      console.log('üë• –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', updatedUsers);
      setUsers(updatedUsers);
    });

    newSocket.on('new-message', (message) => {
      console.log('üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
      setMessages(prev => [...prev, message]);
    });

    newSocket.on('video-sync', (data) => {
      console.log('üé¨ –ü–æ–ª—É—á–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ –æ—Ç', data.fromUser, ':', {
        videoUrl: data.videoUrl,
        isPlaying: data.isPlaying,
        currentTime: data.currentTime,
        duration: data.duration
      });
      
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è
      if (data.fromUser === username) {
        console.log('‚è≠Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è');
        return;
      }
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–∏—Ö
      let hasChanges = false;
      
      if (data.videoUrl !== videoUrl) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º URL –≤–∏–¥–µ–æ:', data.videoUrl);
        setVideoUrl(data.videoUrl);
        saveVideoState(data.videoUrl);
        hasChanges = true;
      }
      
      if (data.isPlaying !== isPlaying) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', data.isPlaying);
        setIsPlaying(data.isPlaying);
        saveVideoState(undefined, data.isPlaying);
        hasChanges = true;
      }
      
      if (Math.abs(data.currentTime - currentTime) > 0.5) { // –†–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 0.5 —Å–µ–∫—É–Ω–¥
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', data.currentTime);
        setCurrentTime(data.currentTime);
        saveVideoState(undefined, undefined, data.currentTime);
        hasChanges = true;
      }
      
      if (data.duration !== duration) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', data.duration);
        setDuration(data.duration);
        saveVideoState(undefined, undefined, undefined, data.duration);
        hasChanges = true;
      }
      
      if (hasChanges) {
        console.log('‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç', data.fromUser);
      } else {
        console.log('‚è≠Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è');
      }
    });

    return () => {
      newSocket.close();
    };
  }, [navigate, roomId]);

  const handleSendMessage = (text: string) => {
    if (!text.trim() || !socket) return;
    socket.emit('send-message', { text: text.trim() });
  };

  const handleVideoUrlChange = (url: string) => {
    console.log('üîó –ò–∑–º–µ–Ω–µ–Ω–∏–µ URL –≤–∏–¥–µ–æ:', url);
    setVideoUrl(url);
    saveVideoState(url);
    const updateData = {
      videoUrl: url,
      isPlaying,
      currentTime,
      duration
    };
    sendVideoSync(updateData);
  };

  const handlePlayPause = (playing: boolean) => {
    console.log('‚èØÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', playing);
    setIsPlaying(playing);
    saveVideoState(undefined, playing);
    const updateData = {
      videoUrl,
      isPlaying: playing,
      currentTime,
      duration
    };
    sendVideoSync(updateData);
  };

  const handleTimeUpdate = (time: number) => {
    console.log('‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏:', time);
    setCurrentTime(time);
    saveVideoState(undefined, undefined, time);
    const updateData = {
      videoUrl,
      isPlaying,
      currentTime: time,
      duration
    };
    sendVideoSync(updateData);
  };

  const handleDurationChange = (duration: number) => {
    console.log('üìè –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:', duration);
    setDuration(duration);
    saveVideoState(undefined, undefined, undefined, duration);
    const updateData = {
      videoUrl,
      isPlaying,
      currentTime,
      duration
    };
    sendVideoSync(updateData);
  };

  const handleSeek = (time: number) => {
    console.log('üéØ –ü–µ—Ä–µ–º–æ—Ç–∫–∞ –∫ –≤—Ä–µ–º–µ–Ω–∏:', time);
    setCurrentTime(time);
    saveVideoState(undefined, undefined, time);
    const updateData = {
      videoUrl,
      isPlaying,
      currentTime: time,
      duration
    };
    sendVideoSync(updateData);
  };

  return (
    <div className="room">
      <div className="room-header">
        <div className="room-info">
          <h2>üé¨ WZen - –ö–æ–º–Ω–∞—Ç–∞: {roomId}</h2>
          <p>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}</p>
          <div className="connection-status">
            <span className={`status-dot ${isConnected ? 'connected' : 'disconnected'}`}>
              {isConnected ? '‚óè' : '‚óã'}
            </span>
            <span>{isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : '–û—Ç–∫–ª—é—á–µ–Ω–æ'}</span>
            {isConnected && <span style={{marginLeft: '8px', fontSize: '0.8rem', opacity: 0.7}}>‚Ä¢ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞</span>}
          </div>
        </div>
        <div className="room-users">
          <span>üë• {users.length} {users.length === 1 ? '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : users.length < 5 ? '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' : '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'}</span>
          {users.length > 0 && (
            <span style={{fontSize: '0.8rem', opacity: 0.7}}>
              ‚Ä¢ {users.map(u => u.username).join(', ')}
            </span>
          )}
        </div>
        <button 
          onClick={() => navigate('/create')} 
          className="btn btn-secondary"
        >
          üö™ –ü–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
        </button>
      </div>

      <div className="room-container">
        <div className="video-section">
          <VideoPlayer
            url={videoUrl}
            isPlaying={isPlaying}
            currentTime={currentTime}
            duration={duration}
            onPlayPause={handlePlayPause}
            onTimeUpdate={handleTimeUpdate}
            onDurationChange={handleDurationChange}
            onSeek={handleSeek}
            onUrlChange={handleVideoUrlChange}
          />
        </div>

        <div className="chat-section">
          <Chat
            messages={messages}
            onSendMessage={handleSendMessage}
            username={username}
          />
        </div>
      </div>
    </div>
  );
};

export default Room; 