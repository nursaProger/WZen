import React, { useRef, useEffect, useState } from 'react';
import './VideoPlayer.css';

interface VideoPlayerProps {
  url: string;
  isPlaying: boolean;
  currentTime: number;
  duration: number;
  onPlayPause: (playing: boolean) => void;
  onTimeUpdate: (time: number) => void;
  onDurationChange: (duration: number) => void;
  onSeek: (time: number) => void;
  onUrlChange: (url: string) => void;
}

const VideoPlayer: React.FC<VideoPlayerProps> = ({
  url,
  isPlaying,
  currentTime,
  duration,
  onPlayPause,
  onTimeUpdate,
  onDurationChange,
  onSeek,
  onUrlChange
}) => {
  const videoRef = useRef<HTMLVideoElement>(null);
  const iframeRef = useRef<HTMLIFrameElement>(null);
  const [inputUrl, setInputUrl] = useState(url);
  const [showUrlInput, setShowUrlInput] = useState(!url);
  const [isIframe, setIsIframe] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [displayUrl, setDisplayUrl] = useState('');
  const [isFullscreen, setIsFullscreen] = useState(false);
  const [rutubeUrlIndex, setRutubeUrlIndex] = useState(0);
  const lastTimeUpdateRef = useRef<number>(0);
  const lastSyncRef = useRef<{isPlaying: boolean, currentTime: number}>({isPlaying: false, currentTime: 0});
  const isUserInteractionRef = useRef<boolean>(false);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–º —Å–µ—Ä–≤–∏—Å–æ–º
  const isStreamingService = (url: string) => {
    const streamingDomains = [
      'rezka.ag', 'kinopoisk.ru', 'ivi.ru', 'okko.tv', 'netflix.com',
      'youtube.com', 'youtu.be', 'vimeo.com', 'dailymotion.com',
      'rutube.ru', 'rutube.com', 'vk.com', 'vk.ru', 'vkvideo.ru',
      'twitch.tv', 'bilibili.com', 'niconico.jp', 'peertube.fr'
    ];
    return streamingDomains.some(domain => url.includes(domain));
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º YouTube URL –≤ embed URL
  const getYouTubeEmbedUrl = (url: string) => {
    const videoId = url.match(/(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/|youtube\.com\/v\/)([^&\n?#]+)/);
    if (videoId) {
      return `https://www.youtube.com/embed/${videoId[1]}?autoplay=0&rel=0&modestbranding=1`;
    }
    return url;
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Rutube URL –≤ embed URL
  const getRutubeEmbedUrl = async (url: string, urlIndex: number = 0) => {
    const videoId = url.match(/rutube\.ru\/video\/([^\/\n?#]+)/);
    if (videoId) {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä
      if (urlIndex === 0) {
        try {
          console.log('üîç –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Rutube –≤–∏–¥–µ–æ:', videoId[1]);
          const proxyResponse = await fetch(`http://localhost:3006/proxy/rutube/${videoId[1]}`);
          if (proxyResponse.ok) {
            const proxyData = await proxyResponse.json();
            if (proxyData.success && proxyData.embedUrl) {
              console.log('‚úÖ –ü—Ä–æ–∫—Å–∏ –≤–µ—Ä–Ω—É–ª embed URL:', proxyData.embedUrl);
              return proxyData.embedUrl;
            }
          }
        } catch (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ URL:', error.message);
        }
      }
      
      // –ü—Ä–æ–±—É–µ–º iframe —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–æ–∫—Å–∏
      if (urlIndex === 1) {
        try {
          console.log('üîç –ü—Ä–æ–±—É–µ–º iframe —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:', videoId[1]);
          return `http://localhost:3006/iframe/${videoId[1]}`;
        } catch (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞ iframe —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
        }
      }
      
      // –ü—Ä–æ–±—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–ª–µ–µ—Ä
      if (urlIndex === 2) {
        try {
          console.log('üé¨ –ü—Ä–æ–±—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–ª–µ–µ—Ä:', videoId[1]);
          return `http://localhost:3006/player/${videoId[1]}`;
        } catch (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–ª–µ–µ—Ä–∞:', error.message);
        }
      }
      
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã embed URL –¥–ª—è Rutube —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const embedUrls = [
        `https://rutube.ru/play/embed/${videoId[1]}?autoplay=0&rel=0`,
        `https://rutube.ru/embed/${videoId[1]}?autoplay=0&rel=0`,
        `https://rutube.ru/video/embed/${videoId[1]}?autoplay=0&rel=0`,
        `https://rutube.ru/play/embed/${videoId[1]}?autoplay=0&rel=0&allowfullscreen=1`,
        `https://rutube.ru/embed/${videoId[1]}?autoplay=0&rel=0&allowfullscreen=1`,
        `https://rutube.ru/play/embed/${videoId[1]}?autoplay=0&rel=0&allowfullscreen=1&origin=${encodeURIComponent(window.location.origin)}`,
        `https://rutube.ru/embed/${videoId[1]}?autoplay=0&rel=0&allowfullscreen=1&origin=${encodeURIComponent(window.location.origin)}`
      ];
      console.log('üé¨ Rutube embed URLs:', embedUrls);
      console.log('üé¨ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å:', urlIndex);
      return embedUrls[urlIndex] || embedUrls[0]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –ø–æ –∏–Ω–¥–µ–∫—Å—É –∏–ª–∏ –ø–µ—Ä–≤—ã–π
    }
    return url;
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º VK URL –≤ embed URL
  const getVKEmbedUrl = (url: string) => {
    console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º VK URL:', url);
    
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã VK –≤–∏–¥–µ–æ
    const patterns = [
      /vk\.com\/video(-?\d+_\d+)/, // video-123_456
      /vk\.com\/clip(-?\d+_\d+)/,  // clip-123_456
      /vk\.com\/video\?z=video(-?\d+_\d+)/, // video?z=video-123_456
      /vk\.com\/clip\?z=clip(-?\d+_\d+)/,   // clip?z=clip-123_456
      /vkvideo\.ru\/video(-?\d+_\d+)/,      // vkvideo.ru/video-123_456
    ];

    for (const pattern of patterns) {
      const match = url.match(pattern);
      if (match) {
        const videoId = match[1];
        const [ownerId, videoIdNum] = videoId.split('_');
        console.log('–ù–∞–π–¥–µ–Ω VK –≤–∏–¥–µ–æ ID:', { ownerId, videoIdNum });
        
        // –î–ª—è vkvideo.ru –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç
        if (url.includes('vkvideo.ru')) {
          return `https://vk.com/video_ext.php?oid=${ownerId}&id=${videoIdNum}&hd=1`;
        }
        
        return `https://vk.com/video_ext.php?oid=${ownerId}&id=${videoIdNum}&hd=1`;
      }
    }
    
    console.log('VK URL –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL');
    return url;
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Vimeo URL –≤ embed URL
  const getVimeoEmbedUrl = (url: string) => {
    const videoId = url.match(/vimeo\.com\/(\d+)/);
    if (videoId) {
      return `https://player.vimeo.com/video/${videoId[1]}?autoplay=0&title=0&byline=0&portrait=0`;
    }
    return url;
  };

  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Dailymotion URL –≤ embed URL
  const getDailymotionEmbedUrl = (url: string) => {
    const videoId = url.match(/dailymotion\.com\/video\/([^\/\n?#]+)/);
    if (videoId) {
      return `https://www.dailymotion.com/embed/video/${videoId[1]}?autoplay=0`;
    }
    return url;
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –ø—Ä—è–º—ã–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–º
  const isDirectVideo = (url: string) => {
    const videoExtensions = ['.mp4', '.webm', '.ogg', '.avi', '.mov', '.mkv'];
    return videoExtensions.some(ext => url.toLowerCase().includes(ext));
  };

  // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getDisplayUrl = async (url: string) => {
    console.log('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º URL:', url);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
    let fixedUrl = url;
    if (!url.startsWith('http://') && !url.startsWith('https://')) {
      if (url.startsWith('ttp://')) {
        fixedUrl = 'h' + url;
      } else if (url.startsWith('ttps://')) {
        fixedUrl = 'h' + url;
      } else {
        fixedUrl = 'https://' + url;
      }
      console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω URL:', fixedUrl);
    }
    
    if (fixedUrl.includes('youtube.com') || fixedUrl.includes('youtu.be')) {
      const embedUrl = getYouTubeEmbedUrl(fixedUrl);
      console.log('YouTube embed URL:', embedUrl);
      return embedUrl;
    }
    if (fixedUrl.includes('rutube.ru') || fixedUrl.includes('rutube.com')) {
      const embedUrl = await getRutubeEmbedUrl(fixedUrl, rutubeUrlIndex);
      console.log('Rutube embed URL:', embedUrl);
      return embedUrl;
    }
    if (fixedUrl.includes('vk.com') || fixedUrl.includes('vk.ru') || fixedUrl.includes('vkvideo.ru')) {
      const embedUrl = getVKEmbedUrl(fixedUrl);
      console.log('VK embed URL:', embedUrl);
      return embedUrl;
    }
    if (fixedUrl.includes('vimeo.com')) {
      const embedUrl = getVimeoEmbedUrl(fixedUrl);
      console.log('Vimeo embed URL:', embedUrl);
      return embedUrl;
    }
    if (fixedUrl.includes('dailymotion.com')) {
      const embedUrl = getDailymotionEmbedUrl(fixedUrl);
      console.log('Dailymotion embed URL:', embedUrl);
      return embedUrl;
    }
    console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π URL:', fixedUrl);
    return fixedUrl;
  };

  useEffect(() => {
    console.log('üé¨ –†–µ–Ω–¥–µ—Ä VideoPlayer:', { url, isIframe, displayUrl, isLoading, error });
  }, [url, isIframe, displayUrl, isLoading, error]);

  useEffect(() => {
    if (url) {
      console.log('üé¨ VideoPlayer –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–π URL:', url);
      console.log('üé¨ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', { isPlaying, currentTime, duration });
      console.log('üé¨ isIframe:', isIframe, 'displayUrl:', displayUrl);
      console.log('üé¨ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø URL...');
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å Rutube URL –ø—Ä–∏ —Å–º–µ–Ω–µ URL
      if (url.includes('rutube.ru') || url.includes('rutube.com')) {
        setRutubeUrlIndex(0);
        console.log('üîÑ –°–±—Ä–æ—à–µ–Ω –∏–Ω–¥–µ–∫—Å Rutube URL');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
      if (url.startsWith('http')) {
        console.log('üé¨ URL –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http - –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å...');
        fetch(url, { method: 'HEAD', mode: 'no-cors' })
          .then(() => console.log('üé¨ URL –¥–æ—Å—Ç—É–ø–µ–Ω (HEAD –∑–∞–ø—Ä–æ—Å)'))
          .catch(() => console.log('üé¨ URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HEAD –∑–∞–ø—Ä–æ—Å)'));
      }
      
      setError(null);
      setIsLoading(true);
      
      // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ (15 —Å–µ–∫—É–Ω–¥ –¥–ª—è iframe, 20 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤–∏–¥–µ–æ)
      const isStreaming = isStreamingService(url);
      const timeoutDuration = isStreaming ? 15000 : 20000;
      
      const loadingTimeout = setTimeout(() => {
        console.log('‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ');
        setIsLoading(false);
        if (isStreaming) {
          if (url.includes('rutube.ru') || url.includes('rutube.com')) {
            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è Rutube, —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏
            setError(null);
          } else {
            setError('–°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π URL –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞.');
          }
        } else {
          setError('–í–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
      }, timeoutDuration);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–æ–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º video —ç–ª–µ–º–µ–Ω—Ç
      if (isDirectVideo(url)) {
        console.log('üé¨ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –ø—Ä—è–º–æ–π –≤–∏–¥–µ–æ —Ñ–∞–π–ª');
        setIsIframe(false);
        setDisplayUrl(url);
        console.log('üé¨ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω displayUrl –¥–ª—è –≤–∏–¥–µ–æ:', url);
      } else {
        // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º iframe –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        console.log('üé¨ –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å:', isStreaming);
        setIsIframe(isStreaming);
        
        // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º displayUrl
        getDisplayUrl(url).then(newDisplayUrl => {
          setDisplayUrl(newDisplayUrl);
          console.log('üé¨ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω displayUrl –¥–ª—è iframe:', newDisplayUrl);
        }).catch(error => {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è displayUrl:', error);
          setDisplayUrl(url); // Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É URL
        });
      }
      
      return () => {
        clearTimeout(loadingTimeout);
      };
    } else {
      console.log('üé¨ VideoPlayer: URL –ø—É—Å—Ç–æ–π (–æ–∂–∏–¥–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è)');
    }
  }, [url]);

  useEffect(() => {
    if (isIframe) {
      // –î–ª—è iframe –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ postMessage
      if (iframeRef.current) {
        const iframe = iframeRef.current;
        try {
          if (isPlaying) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤ iframe
            iframe.contentWindow?.postMessage('play', '*');
          } else {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–∞—É–∑—ã –≤ iframe
            iframe.contentWindow?.postMessage('pause', '*');
          }
        } catch (error) {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ iframe');
        }
      }
      return;
    }

    const video = videoRef.current;
    if (!video) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    const hasChanges = 
      lastSyncRef.current.isPlaying !== isPlaying ||
      Math.abs(lastSyncRef.current.currentTime - currentTime) > 0.5;

    if (!hasChanges) {
      return; // –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
    }

    console.log('üé¨ –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é:', { isPlaying, currentTime });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 0.5 —Å–µ–∫—É–Ω–¥
    if (Math.abs(video.currentTime - currentTime) > 0.5) {
      console.log('üé¨ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è:', currentTime, '—Ç–µ–∫—É—â–µ–µ:', video.currentTime);
      video.currentTime = currentTime;
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    if (!isUserInteractionRef.current) {
      if (isPlaying && video.paused) {
        console.log('üé¨ –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)');
        video.play().catch(console.error);
      } else if (!isPlaying && !video.paused) {
        console.log('üé¨ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)');
        video.pause();
      }
    } else {
      console.log('üé¨ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    lastSyncRef.current = { isPlaying, currentTime };
  }, [isPlaying, currentTime, isIframe]);

  useEffect(() => {
    if (isIframe) {
      // –î–ª—è iframe –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–º–æ—Ç–∫–∏
      if (iframeRef.current) {
        const iframe = iframeRef.current;
        try {
          iframe.contentWindow?.postMessage(`seek:${currentTime}`, '*');
        } catch (error) {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–º–æ—Ç–∫–∏ –≤ iframe');
        }
      }
      return;
    }

    const video = videoRef.current;
    if (!video) return;

    // –í—Ä–µ–º—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º useEffect –≤—ã—à–µ
  }, [currentTime, isIframe]);

  useEffect(() => {
    if (isIframe) {
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç iframe
      const handleMessage = (event: MessageEvent) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—à–µ–≥–æ iframe
        if (event.source === iframeRef.current?.contentWindow) {
          const data = event.data;
          
          if (typeof data === 'object' && data.type) {
            switch (data.type) {
              case 'timeupdate':
                onTimeUpdate(data.currentTime);
                break;
              case 'play':
                onPlayPause(true);
                break;
              case 'pause':
                onPlayPause(false);
                break;
              case 'durationchange':
                onDurationChange(data.duration);
                break;
            }
          }
        }
      };

      window.addEventListener('message', handleMessage);
      return () => window.removeEventListener('message', handleMessage);
    }
  }, [isIframe, onTimeUpdate, onPlayPause, onDurationChange]);

  const handleVideoClick = () => {
    console.log('üé¨ –ö–ª–∏–∫ –ø–æ –≤–∏–¥–µ–æ, —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', isPlaying);
    isUserInteractionRef.current = true;
    
    if (isIframe) {
      // –î–ª—è iframe –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
      if (iframeRef.current) {
        const iframe = iframeRef.current;
        try {
          iframe.contentWindow?.postMessage(isPlaying ? 'pause' : 'play', '*');
        } catch (error) {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ iframe');
        }
      }
      return;
    }
    
    // –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –≤–∏–¥–µ–æ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const newPlayingState = !isPlaying;
    console.log('üé¨ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞:', newPlayingState);
    onPlayPause(newPlayingState);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      isUserInteractionRef.current = false;
      console.log('üé¨ –°–±—Ä–æ—à–µ–Ω —Ñ–ª–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è');
    }, 2000);
  };

  const handleTimeUpdate = () => {
    if (isIframe) {
      // –î–ª—è iframe –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ postMessage
      return;
    }
    const video = videoRef.current;
    if (video) {
      const now = Date.now();
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–µ —á–∞—â–µ —á–µ–º —Ä–∞–∑ –≤ 500–º—Å –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
      if (now - lastTimeUpdateRef.current > 500) {
        // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤–æ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        if (!isUserInteractionRef.current) {
          onTimeUpdate(video.currentTime);
        }
        lastTimeUpdateRef.current = now;
      }
    }
  };

  const handleLoadedMetadata = () => {
    if (isIframe) {
      // –î–ª—è iframe –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ postMessage
      console.log('üé¨ Iframe –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
      setIsLoading(false);
      setError(null);
      return;
    }
    const video = videoRef.current;
    if (video) {
      console.log('üé¨ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:', video.duration);
      console.log('üé¨ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é');
      onDurationChange(video.duration);
      setIsLoading(false);
      setError(null);
    }
  };

  const handleVideoError = (e: React.SyntheticEvent<HTMLVideoElement, Event>) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', e);
    console.error('‚ùå –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç:', videoRef.current);
    
    const video = videoRef.current;
    if (video && video.error) {
      console.error('‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏ –≤–∏–¥–µ–æ:', video.error.code);
      console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', video.error.message);
      
      let errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ. ';
      switch (video.error.code) {
        case 1:
          errorMessage += '–í–∏–¥–µ–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.';
          break;
        case 2:
          errorMessage += '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
          break;
        case 3:
          errorMessage += '–í–∏–¥–µ–æ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–æ –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç.';
          break;
        case 4:
          errorMessage += '–í–∏–¥–µ–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ.';
          break;
        default:
          errorMessage += '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
      }
      setError(errorMessage);
    } else {
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
    setIsLoading(false);
  };

  const handleIframeLoad = () => {
    console.log('Iframe –∑–∞–≥—Ä—É–∂–µ–Ω');
    setIsLoading(false);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ iframe
    setTimeout(() => {
      if (iframeRef.current) {
        try {
          // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É iframe
          const iframe = iframeRef.current;
          if (iframe.contentWindow && iframe.contentWindow.location.href) {
            console.log('Iframe —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
          }
        } catch (error) {
          console.log('Iframe –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–∏—Ç–∏–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
          
          // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Rutube
          if (url.includes('rutube.ru') || url.includes('rutube.com')) {
            setError('–í–∏–¥–µ–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã.');
          } else {
            setError('–í–∏–¥–µ–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π URL.');
          }
        }
      }
    }, 2000);
  };

  const handleIframeError = () => {
    console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ iframe');
    
    // –î–ª—è Rutube –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π embed URL
    if (url.includes('rutube.ru') || url.includes('rutube.com')) {
      if (rutubeUrlIndex < 8) { // –£ –Ω–∞—Å 9 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ URL (–∏–Ω–¥–µ–∫—Å—ã 0-8)
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π Rutube embed URL, –∏–Ω–¥–µ–∫—Å:', rutubeUrlIndex + 1);
        setRutubeUrlIndex(rutubeUrlIndex + 1);
        setIsLoading(true);
        setError(null);
        return;
      } else {
        console.log('‚ùå –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã Rutube embed URL –∏—Å—á–µ—Ä–ø–∞–Ω—ã');
        setError('–í—Å–µ –º–µ—Ç–æ–¥—ã –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ.');
      }
    } else {
      setError('–°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π URL –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞.');
    }
    
    setIsLoading(false);
  };

  const handleSeek = (e: React.ChangeEvent<HTMLInputElement>) => {
    const time = parseFloat(e.target.value);
    if (isIframe) {
      // –î–ª—è iframe –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–º–æ—Ç–∫–∏
      if (iframeRef.current) {
        const iframe = iframeRef.current;
        try {
          iframe.contentWindow?.postMessage(`seek:${time}`, '*');
        } catch (error) {
          console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–º–æ—Ç–∫–∏ –≤ iframe');
        }
      }
      return;
    }
    onSeek(time);
  };

  const handleUrlSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!inputUrl.trim()) return;

    const url = inputUrl.trim();
    console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π URL:', url);
    
    // –ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
    onUrlChange(url);
    setShowUrlInput(false);
  };

  const formatTime = (time: number) => {
    const minutes = Math.floor(time / 60);
    const seconds = Math.floor(time % 60);
    return `${minutes}:${seconds.toString().padStart(2, '0')}`;
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  const toggleFullscreen = () => {
    if (!document.fullscreenElement) {
      // –í—Ö–æ–¥–∏–º –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
      const videoContainer = document.querySelector('.video-container');
      if (videoContainer) {
        videoContainer.requestFullscreen().then(() => {
          setIsFullscreen(true);
        }).catch(err => {
          console.log('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º:', err);
        });
      }
    } else {
      // –í—ã—Ö–æ–¥–∏–º –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
      document.exitFullscreen().then(() => {
        setIsFullscreen(false);
      }).catch(err => {
        console.log('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:', err);
      });
    }
  };

  // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
  useEffect(() => {
    const handleFullscreenChange = () => {
      setIsFullscreen(!!document.fullscreenElement);
    };

    document.addEventListener('fullscreenchange', handleFullscreenChange);
    return () => {
      document.removeEventListener('fullscreenchange', handleFullscreenChange);
    };
  }, []);

  if (showUrlInput) {
    return (
      <div className="video-player">
        <div className="url-input-container">
          <h3>–í–≤–µ–¥–∏—Ç–µ URL –≤–∏–¥–µ–æ</h3>
          <form onSubmit={handleUrlSubmit}>
            <input
              type="url"
              placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ"
              value={inputUrl}
              onChange={(e) => setInputUrl(e.target.value)}
              className="input"
              required
            />
            <button type="submit" className="btn">
              –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ
            </button>
          </form>
        </div>
      </div>
    );
  }

  return (
    <div className="video-player">
      <div className="video-container">
        {isLoading && (
          <div className="loading-overlay">
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...</p>
          </div>
        )}
        
        {error && !(url.includes('rutube.ru') || url.includes('rutube.com')) && (
          <div className="error-overlay">
            <div className="error-message">
              <p>‚ùå {error}</p>
              <button 
                onClick={() => setShowUrlInput(true)}
                className="btn"
              >
                üîó –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π URL
              </button>
            </div>
          </div>
        )}
        
        {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è Rutube —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ */}
        {error && (url.includes('rutube.ru') || url.includes('rutube.com')) && (
          <div className="error-overlay">
            <div className="error-message">
              <p>‚ùå {error}</p>
              <div style={{ marginBottom: '16px', fontSize: '0.9rem', color: 'rgba(255, 255, 255, 0.8)' }}>
                üí° <strong>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è:</strong>
              </div>
              <button 
                onClick={() => {
                  setRutubeUrlIndex(0);
                  setIsLoading(true);
                  setError(null);
                }}
                className="btn"
                style={{ marginRight: '8px', background: '#ff6b6b' }}
              >
                üîç –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä
              </button>
              <button 
                onClick={() => {
                  setRutubeUrlIndex(1);
                  setIsLoading(true);
                  setError(null);
                }}
                className="btn"
                style={{ marginRight: '8px', background: '#9c27b0' }}
              >
                üé≠ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å iframe —Å—Ç—Ä–∞–Ω–∏—Ü—É
              </button>
              <button 
                onClick={() => {
                  setRutubeUrlIndex(2);
                  setIsLoading(true);
                  setError(null);
                }}
                className="btn"
                style={{ marginRight: '8px', background: '#ff9800' }}
              >
                üéÆ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–ª–µ–µ—Ä
              </button>
              <button 
                onClick={() => {
                  if (rutubeUrlIndex < 8) {
                    setRutubeUrlIndex(rutubeUrlIndex + 1);
                    setIsLoading(true);
                    setError(null);
                  }
                }}
                className="btn"
                style={{ marginRight: '8px', background: '#007bff' }}
                disabled={rutubeUrlIndex >= 8}
              >
                üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π embed URL ({rutubeUrlIndex + 1}/9)
              </button>
              <button 
                onClick={() => window.open(url, '_blank')}
                className="btn"
                style={{ background: '#28a745' }}
              >
                üé¨ –û—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
              </button>
            </div>
          </div>
        )}
        
        {isIframe ? (
          <iframe
            ref={iframeRef}
            src={displayUrl}
            className="video-element iframe-video"
            allowFullScreen
            allow="autoplay; encrypted-media"
            onLoad={handleIframeLoad}
            onError={handleIframeError}
          />
        ) : (
          <video
            ref={videoRef}
            src={displayUrl}
            onClick={handleVideoClick}
            onTimeUpdate={handleTimeUpdate}
            onLoadedMetadata={handleLoadedMetadata}
            onCanPlay={() => {
              console.log('üé¨ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é (canplay)');
              setIsLoading(false);
              setError(null);
            }}
            onError={handleVideoError}
            onPlay={() => {
              console.log('üé¨ –°–æ–±—ã—Ç–∏–µ play —Å—Ä–∞–±–æ—Ç–∞–ª–æ');
              // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è play/pause
            }}
            onPause={() => {
              console.log('üé¨ –°–æ–±—ã—Ç–∏–µ pause —Å—Ä–∞–±–æ—Ç–∞–ª–æ');
              // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è play/pause
            }}
            className="video-element"
            style={{ display: displayUrl ? 'block' : 'none' }}
          />
        )}
        
        {!url && !isLoading && !error && (
          <div className="video-placeholder">
            <p>–ù–∞–∂–º–∏—Ç–µ "üîó" —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ</p>
          </div>
        )}
        
        {isLoading && displayUrl && (
          <div className="loading-overlay" style={{ zIndex: 10 }}>
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...</p>
            <p style={{fontSize: '0.8rem', marginTop: '8px'}}>URL: {displayUrl}</p>
          </div>
        )}
      </div>

      <div className="video-controls">
        <div className="control-row">
          <button
            onClick={() => {
              console.log('üé¨ –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø–∞—É–∑—ã/–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è');
              isUserInteractionRef.current = true;
              const newPlayingState = !isPlaying;
              console.log('üé¨ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞:', newPlayingState);
              onPlayPause(newPlayingState);
              
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
              setTimeout(() => {
                isUserInteractionRef.current = false;
                console.log('üé¨ –°–±—Ä–æ—à–µ–Ω —Ñ–ª–∞–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è (–∫–Ω–æ–ø–∫–∞)');
              }, 2000);
            }}
            className="control-btn"
            disabled={!url || isLoading}
          >
            {isPlaying ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'}
          </button>
          
          <div className="time-display">
            {formatTime(currentTime)} / {formatTime(duration)}
          </div>
          
          {isIframe && (
            <div className="iframe-notice">
              üì∫ –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞
            </div>
          )}
          
          <button
            onClick={toggleFullscreen}
            className="control-btn"
            title={isFullscreen ? "–í—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞" : "–ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º"}
          >
            {isFullscreen ? '‚èπÔ∏è' : '‚õ∂'}
          </button>
          
          <button
            onClick={() => setShowUrlInput(true)}
            className="control-btn"
          >
            üîó
          </button>
        </div>
        
        <input
          type="range"
          min="0"
          max={duration || 0}
          value={currentTime}
          onChange={handleSeek}
          className="seek-bar"
          disabled={!url || isLoading}
        />
      </div>
    </div>
  );
};

export default VideoPlayer; 