import { useEffect, useState, useRef } from 'react';
import { 
  ref, 
  onValue, 
  push, 
  set, 
  remove, 
  serverTimestamp,
  DatabaseReference 
} from 'firebase/database';
import { database } from '../firebase';

interface FirebaseMessage {
  id: string;
  username: string;
  text: string;
  timestamp: string;
}

interface FirebaseUser {
  id: string;
  username: string;
  joinedAt: string;
}

interface FirebaseVideoState {
  videoUrl: string;
  isPlaying: boolean;
  currentTime: number;
  duration: number;
  lastUpdatedBy: string;
  lastUpdatedAt: string;
}

interface FirebaseRoomData {
  users: FirebaseUser[];
  videoState: FirebaseVideoState;
  messages: FirebaseMessage[];
}

export const useFirebase = (roomId: string, username: string) => {
  const [isConnected, setIsConnected] = useState(false);
  const [users, setUsers] = useState<FirebaseUser[]>([]);
  const [messages, setMessages] = useState<FirebaseMessage[]>([]);
  const [videoUrl, setVideoUrl] = useState('');
  const [isPlaying, setIsPlaying] = useState(false);
  const [currentTime, setCurrentTime] = useState(0);
  const [duration, setDuration] = useState(0);
  
  const userRef = useRef<DatabaseReference | null>(null);
  const roomRef = useRef<DatabaseReference | null>(null);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
  useEffect(() => {
    if (!roomId || !username) return;

    console.log('üî• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', roomId, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', username);
    
    // –°—Å—ã–ª–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–µ
    roomRef.current = ref(database, `rooms/${roomId}`);
    userRef.current = ref(database, `rooms/${roomId}/users/${username}`);

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ
    const joinRoom = async () => {
      try {
        const userData: FirebaseUser = {
          id: username,
          username: username,
          joinedAt: new Date().toISOString()
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç—É
        await set(userRef.current!, userData);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const messageRef = ref(database, `rooms/${roomId}/messages`);
        const newMessage: FirebaseMessage = {
          id: Date.now().toString(),
          username: '–°–∏—Å—Ç–µ–º–∞',
          text: `${username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ`,
          timestamp: new Date().toISOString()
        };
        await push(messageRef, newMessage);

        setIsConnected(true);
        console.log('‚úÖ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∫–æ–º–Ω–∞—Ç–µ —á–µ—Ä–µ–∑ Firebase');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–º–Ω–∞—Ç–µ:', error);
      }
    };

    joinRoom();

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–º–Ω–∞—Ç–µ
    const unsubscribeRoom = onValue(roomRef.current, (snapshot) => {
      const data = snapshot.val();
      if (data) {
        console.log('üìã –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã:', data);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (data.users) {
          const usersList = Object.values(data.users) as FirebaseUser[];
          setUsers(usersList);
          console.log('üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ:', usersList.length);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        if (data.messages) {
          const messagesList = Object.values(data.messages) as FirebaseMessage[];
          setMessages(messagesList);
          console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ:', messagesList.length);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–µ–æ
        if (data.videoState) {
          const videoState = data.videoState as FirebaseVideoState;
          setVideoUrl(videoState.videoUrl || '');
          setIsPlaying(videoState.isPlaying || false);
          setCurrentTime(videoState.currentTime || 0);
          setDuration(videoState.duration || 0);
          console.log('üé¨ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–µ–æ –æ—Ç:', videoState.lastUpdatedBy);
        }
      }
    });

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      console.log('üîå –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç Firebase');
      unsubscribeRoom();
      
      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
      if (userRef.current) {
        remove(userRef.current).catch(console.error);
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ
      if (roomRef.current) {
        const messageRef = ref(database, `rooms/${roomId}/messages`);
        const leaveMessage: FirebaseMessage = {
          id: Date.now().toString(),
          username: '–°–∏—Å—Ç–µ–º–∞',
          text: `${username} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É`,
          timestamp: new Date().toISOString()
        };
        push(messageRef, leaveMessage).catch(console.error);
      }
    };
  }, [roomId, username]);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const sendMessage = async (text: string) => {
    if (!text.trim() || !roomRef.current) return;

    try {
      const messageRef = ref(database, `rooms/${roomId}/messages`);
      const newMessage: FirebaseMessage = {
        id: Date.now().toString(),
        username: username,
        text: text.trim(),
        timestamp: new Date().toISOString()
      };
      await push(messageRef, newMessage);
      console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', text);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  };

  const sendVideoSync = async (data: {
    videoUrl: string;
    isPlaying: boolean;
    currentTime: number;
    duration: number;
  }) => {
    if (!roomRef.current) return;

    try {
      const videoStateRef = ref(database, `rooms/${roomId}/videoState`);
      const videoState: FirebaseVideoState = {
        ...data,
        lastUpdatedBy: username,
        lastUpdatedAt: new Date().toISOString()
      };
      await set(videoStateRef, videoState);
      console.log('üé¨ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', data);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–∏–¥–µ–æ:', error);
    }
  };

  return {
    isConnected,
    users,
    messages,
    videoUrl,
    isPlaying,
    currentTime,
    duration,
    sendMessage,
    sendVideoSync
  };
}; 