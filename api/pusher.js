const Pusher = require('pusher');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pusher
const pusher = new Pusher({
  appId: process.env.PUSHER_APP_ID || "2018557",
  key: process.env.PUSHER_KEY || "9552c3255ea1afa7cf5c",
  secret: process.env.PUSHER_SECRET || "68f606d08e852efcb7dc",
  cluster: process.env.PUSHER_CLUSTER || "ap2",
  useTLS: true
});

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
if (!global.rooms) {
  global.rooms = new Map();
}
if (!global.roomTimeouts) {
  global.roomTimeouts = new Map();
}

const rooms = global.rooms;
const roomTimeouts = global.roomTimeouts;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
const scheduleRoomDeletion = (roomId) => {
  if (roomTimeouts.has(roomId)) {
    clearTimeout(roomTimeouts.get(roomId));
  }
  
  const timeoutId = setTimeout(() => {
    const room = rooms.get(roomId);
    if (room && room.users.length === 0) {
      rooms.delete(roomId);
      roomTimeouts.delete(roomId);
      console.log(`üè† –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —É–¥–∞–ª–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É`);
    }
  }, 30000);
  
  roomTimeouts.set(roomId, timeoutId);
};

module.exports = (req, res) => {
  console.log('üì® –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:', req.method, req.body);
  
  if (req.method === 'POST') {
    const { action, roomId, username, data } = req.body;
    console.log('üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ:', action, '–¥–ª—è –∫–æ–º–Ω–∞—Ç—ã:', roomId, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', username);

    switch (action) {
      case 'join-room':
        // –ü–æ–∫–∏–¥–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–æ–º–Ω–∞—Ç—É
        if (username) {
          const existingRoom = Array.from(rooms.values()).find(room => 
            room.users.some(user => user.username === username)
          );
          if (existingRoom) {
            existingRoom.users = existingRoom.users.filter(user => user.username !== username);
            if (existingRoom.users.length === 0) {
              rooms.delete(existingRoom.id);
            }
          }
        }

        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!rooms.has(roomId)) {
          rooms.set(roomId, {
            id: roomId,
            users: [],
            videoUrl: '',
            isPlaying: false,
            currentTime: 0,
            duration: 0,
            messages: []
          });
        } else {
          if (roomTimeouts.has(roomId)) {
            clearTimeout(roomTimeouts.get(roomId));
            roomTimeouts.delete(roomId);
          }
        }

        const room = rooms.get(roomId);
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        const existingUserIndex = room.users.findIndex(user => user.username === username);
        if (existingUserIndex !== -1) {
          room.users.splice(existingUserIndex, 1);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = { id: Date.now().toString(), username };
        room.users.push(user);
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', username);
        console.log('üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ:', room.users.length);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        pusher.trigger(`room-${roomId}`, 'room-data', {
          users: room.users,
          videoUrl: room.videoUrl,
          isPlaying: room.isPlaying,
          currentTime: room.currentTime,
          duration: room.duration,
          messages: room.messages
        });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ user-joined –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.username);
        pusher.trigger(`room-${roomId}`, 'user-joined', user);
        
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
        pusher.trigger(`room-${roomId}`, 'users-updated', room.users);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const systemMessage = {
          id: Date.now().toString(),
          username: '–°–∏—Å—Ç–µ–º–∞',
          text: `${username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ`,
          timestamp: new Date().toISOString()
        };
        room.messages.push(systemMessage);
        pusher.trigger(`room-${roomId}`, 'new-message', systemMessage);

        res.json({ success: true, user });
        break;

      case 'send-message':
        const messageRoom = rooms.get(roomId);
        if (messageRoom) {
          const message = {
            id: Date.now().toString(),
            username: username,
            text: data.text,
            timestamp: new Date().toISOString()
          };
          
          messageRoom.messages.push(message);
          pusher.trigger(`room-${roomId}`, 'new-message', message);
        }
        res.json({ success: true });
        break;

      case 'video-update':
        const videoRoom = rooms.get(roomId);
        if (videoRoom) {
          videoRoom.videoUrl = data.videoUrl;
          videoRoom.isPlaying = data.isPlaying;
          videoRoom.currentTime = data.currentTime;
          videoRoom.duration = data.duration;
          
          pusher.trigger(`room-${roomId}`, 'video-sync', {
            videoUrl: data.videoUrl,
            isPlaying: data.isPlaying,
            currentTime: data.currentTime,
            duration: data.duration,
            fromUser: username
          });
        }
        res.json({ success: true });
        break;

      case 'leave-room':
        const leaveRoom = rooms.get(roomId);
        if (leaveRoom) {
          const removedUser = leaveRoom.users.find(user => user.username === username);
          leaveRoom.users = leaveRoom.users.filter(user => user.username !== username);
          
          if (removedUser) {
            pusher.trigger(`room-${roomId}`, 'user-left', removedUser);
            
            const systemMessage = {
              id: Date.now().toString(),
              username: '–°–∏—Å—Ç–µ–º–∞',
              text: `${removedUser.username} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É`,
              timestamp: new Date().toISOString()
            };
            leaveRoom.messages.push(systemMessage);
            pusher.trigger(`room-${roomId}`, 'new-message', systemMessage);
          }
          
          if (leaveRoom.users.length === 0) {
            scheduleRoomDeletion(roomId);
          } else {
            pusher.trigger(`room-${roomId}`, 'users-updated', leaveRoom.users);
          }
        }
        res.json({ success: true });
        break;

      default:
        res.status(400).json({ error: 'Unknown action' });
    }
  } else {
    res.status(405).json({ error: 'Method not allowed' });
  }
}; 